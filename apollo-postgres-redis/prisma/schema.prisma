generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model domains {
  id          Int        @id @default(autoincrement())
  root        String     @unique @db.VarChar(255)
  priceId     String?    @db.VarChar(255)
  priceClass  String?    @db.VarChar(255)
  cartVal     String?    @db.VarChar(255)
  cartId      String?    @db.VarChar(255)
  cartClass   String?    @db.VarChar(255)
  priceErrors Int?
  cartErrors  Int?
  products    products[]
}

model jobs {
  id             Int       @id @default(autoincrement())
  /// The value of this field is generated by the database as: `uuid_generate_v1mc()`.
  jobUuid        String?   @unique @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  name           String?   @db.VarChar(255)
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  updated_at     DateTime  @default(now()) @db.Timestamptz(6)
  expires        DateTime  @default(now()) @db.Timestamptz(6)
  stockAlert     Boolean?  @default(false)
  priceAlert     Float?    @db.Real
  lastStockAlert DateTime? @db.Timestamptz(6)
  lastPriceAlert DateTime? @db.Timestamptz(6)
  userId         Int
  prodId         Int
  product        products  @relation(fields: [prodId], references: [id])
  user           users     @relation(fields: [userId], references: [id])

  @@index([jobUuid], name: "jobs_jobuuid_index")
}

model products {
  id         Int        @id @default(autoincrement())
  /// The value of this field is generated by the database as: `uuid_generate_v1mc()`.
  prodUuid   String?    @unique @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  updated_at DateTime   @default(now()) @db.Timestamptz(6)
  name       String?    @db.VarChar(255)
  img        String?    @db.VarChar(255)
  altImg     String?    @db.VarChar(255)
  altImg2    String?    @db.VarChar(255)
  url        String     @unique @db.VarChar(255)
  useJs      Boolean?   @default(false)
  domId      Int
  domain     domains    @relation(fields: [domId], references: [id])
  jobs       jobs[]
  prodInfo   prodInfo[]

  @@index([prodUuid], name: "products_produuid_index")
}

model users {
  id         Int       @id @default(autoincrement())
  /// The value of this field is generated by the database as: `uuid_generate_v1mc()`.
  userUuid   String?   @unique @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @default(now()) @db.Timestamptz(6)
  lastLogin  DateTime? @db.Timestamptz(6)
  email      String    @unique @db.VarChar(255)
  password   String    @db.VarChar(255)
  jobs       jobs[]

  @@index([userUuid], name: "users_useruuid_index")
}

model knex_migrations {
  id             Int       @id @default(autoincrement())
  name           String?   @db.VarChar(255)
  batch          Int?
  migration_time DateTime? @db.Timestamptz(6)
}

model knex_migrations_lock {
  index     Int  @id @default(autoincrement())
  is_locked Int?
}

model prodInfo {
  /// The value of this field is generated by the database as: `uuid_generate_v1mc()`.
  id         String    @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  inStock    Boolean?
  price      Float?    @db.Real
  prodId     Int
  products   products  @relation(fields: [prodId], references: [id])
}
